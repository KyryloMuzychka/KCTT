import{_ as t,c as e,o as a,O as i}from"./chunks/framework.3ec6c483.js";const b=JSON.parse('{"title":"Ticket class","description":"","frontmatter":{},"headers":[],"relativePath":"api/elements/ticket.md"}'),o={name:"api/elements/ticket.md"},s=i('<h1 id="ticket-class" tabindex="-1">Ticket class <a class="header-anchor" href="#ticket-class" aria-label="Permalink to &quot;Ticket class&quot;">​</a></h1><h2 id="ticket-eventid-row-place" tabindex="-1">Ticket(eventId, row, place) <a class="header-anchor" href="#ticket-eventid-row-place" aria-label="Permalink to &quot;Ticket(eventId, row, place)&quot;">​</a></h2><p>Конструктор класу Event для визначення початкових значень екземпляру Ticket.</p><h2 id="public-api" tabindex="-1">Public API <a class="header-anchor" href="#public-api" aria-label="Permalink to &quot;Public API&quot;">​</a></h2><h3 id="std-string-getid" tabindex="-1">std::string GetId() <a class="header-anchor" href="#std-string-getid" aria-label="Permalink to &quot;std::string GetId()&quot;">​</a></h3><p>Функція для отримання унікального номеру білету.</p><h3 id="std-string-getrow" tabindex="-1">std::string GetRow() <a class="header-anchor" href="#std-string-getrow" aria-label="Permalink to &quot;std::string GetRow()&quot;">​</a></h3><p>Функція для отримання номеру рядку.</p><h3 id="std-string-getplace" tabindex="-1">std::string GetPlace() <a class="header-anchor" href="#std-string-getplace" aria-label="Permalink to &quot;std::string GetPlace()&quot;">​</a></h3><p>Функція для отримання розташування сидіння в рядку.</p><h3 id="std-string-geteventid" tabindex="-1">std::string GetEventId() <a class="header-anchor" href="#std-string-geteventid" aria-label="Permalink to &quot;std::string GetEventId()&quot;">​</a></h3><p>Функція для отримання унікального номеру івента.</p><h3 id="std-string-getcustomerid" tabindex="-1">std::string GetCustomerId() <a class="header-anchor" href="#std-string-getcustomerid" aria-label="Permalink to &quot;std::string GetCustomerId()&quot;">​</a></h3><p>Функція для отримання унікального номеру користувача.</p><h3 id="bool-isbooked" tabindex="-1">bool IsBooked() <a class="header-anchor" href="#bool-isbooked" aria-label="Permalink to &quot;bool IsBooked()&quot;">​</a></h3><p>Функція для перевірки наявності бронювання на білет.</p><h3 id="void-unbooking" tabindex="-1">void Unbooking() <a class="header-anchor" href="#void-unbooking" aria-label="Permalink to &quot;void Unbooking()&quot;">​</a></h3><p>Функція для скасування бронювання.</p><h3 id="void-booking-std-string-customerid" tabindex="-1">void Booking(std::string customerId) <a class="header-anchor" href="#void-booking-std-string-customerid" aria-label="Permalink to &quot;void Booking(std::string customerId)&quot;">​</a></h3><p>Функція для бронювання.</p><h2 id="private-api" tabindex="-1">Private API <a class="header-anchor" href="#private-api" aria-label="Permalink to &quot;Private API&quot;">​</a></h2><ul><li><p><code>std::string</code> id - унікальний номер івенту.</p><ul><li>Формат: <strong>t[n]</strong> (t1, t2, t3 etc.)</li></ul></li><li><p><code>std::string</code> row - рядок сидіння.</p></li><li><p><code>std::string</code> place - розташування сидіння в рядку.</p></li><li><p><code>std::string</code> eventId - унікальний номер івенту, до якого належить цей білет.</p></li><li><p><code>std::string</code> customerId - унікальний номер користувача, до якого належить цей білет.</p><ul><li>Примітка: customerId може бути порожнім, в тому випадку, якщой цей білет не був куплений.</li></ul></li><li><p><code>bool</code> isBooked - прапор, який говорить про забронювання білету.</p></li></ul>',22),r=[s];function d(n,l,c,h,p,u){return a(),e("div",null,r)}const k=t(o,[["render",d]]);export{b as __pageData,k as default};
