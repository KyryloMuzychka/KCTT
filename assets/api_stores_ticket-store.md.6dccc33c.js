import{_ as e,c as t,o as i,O as a}from"./chunks/framework.3ec6c483.js";const p=JSON.parse('{"title":"TicketStore class","description":"","frontmatter":{},"headers":[],"relativePath":"api/stores/ticket-store.md"}'),d={name:"api/stores/ticket-store.md"},r=a('<h1 id="ticketstore-class" tabindex="-1">TicketStore class <a class="header-anchor" href="#ticketstore-class" aria-label="Permalink to &quot;TicketStore class&quot;">​</a></h1><h2 id="ticketstore" tabindex="-1">TicketStore() <a class="header-anchor" href="#ticketstore" aria-label="Permalink to &quot;TicketStore()&quot;">​</a></h2><p>Конструктор класса TicketStore для определение хранилища билетов.</p><h2 id="public-api" tabindex="-1">Public API <a class="header-anchor" href="#public-api" aria-label="Permalink to &quot;Public API&quot;">​</a></h2><h3 id="int-getsize" tabindex="-1">int GetSize() <a class="header-anchor" href="#int-getsize" aria-label="Permalink to &quot;int GetSize()&quot;">​</a></h3><p>Функция для получение количества билетов.</p><h3 id="void-add-ticket-ticket" tabindex="-1">void Add(Ticket *ticket) <a class="header-anchor" href="#void-add-ticket-ticket" aria-label="Permalink to &quot;void Add(Ticket \\*ticket)&quot;">​</a></h3><p>Функция для добавление ссылки на экземпляр класса Ticket в хранилище.</p><h3 id="void-delete-size-t-index" tabindex="-1">void Delete(size_t index) <a class="header-anchor" href="#void-delete-size-t-index" aria-label="Permalink to &quot;void Delete(size_t index)&quot;">​</a></h3><p>Функция для удаления ссылки по индексу в векторе.</p><h3 id="void-deleteall" tabindex="-1">void DeleteAll() <a class="header-anchor" href="#void-deleteall" aria-label="Permalink to &quot;void DeleteAll()&quot;">​</a></h3><p>Функция для отчистки хранилища.</p><h3 id="void-deletebyid-std-string-id" tabindex="-1">void DeleteById(std::string id) <a class="header-anchor" href="#void-deletebyid-std-string-id" aria-label="Permalink to &quot;void DeleteById(std::string id)&quot;">​</a></h3><p>Функция для удаления билета по уникальному номеру.</p><h3 id="void-deletebyeventid-std-string-id" tabindex="-1">void DeleteByEventId(std::string id) <a class="header-anchor" href="#void-deletebyeventid-std-string-id" aria-label="Permalink to &quot;void DeleteByEventId(std::string id)&quot;">​</a></h3><p>Функция для удаления всех билетов по уникальному номеру ивента, к которому они привязаны.</p><h3 id="void-deletebycustomerid-std-string-customerid" tabindex="-1">void DeleteByCustomerId(std::string customerId) <a class="header-anchor" href="#void-deletebycustomerid-std-string-customerid" aria-label="Permalink to &quot;void DeleteByCustomerId(std::string customerId)&quot;">​</a></h3><p>Функция для удаления всех билетов по уникальному номеру пользователя, к которому они привязаны.</p><h3 id="bool-existsbyid-std-string-id" tabindex="-1">bool ExistsById(std::string id) <a class="header-anchor" href="#bool-existsbyid-std-string-id" aria-label="Permalink to &quot;bool ExistsById(std::string id)&quot;">​</a></h3><p>Функция для проверки существование тикета по уникальному номеру.</p><h3 id="ticket-get-size-t-index" tabindex="-1">Ticket *Get(size_t index) <a class="header-anchor" href="#ticket-get-size-t-index" aria-label="Permalink to &quot;Ticket \\*Get(size_t index)&quot;">​</a></h3><p>Функция для получении ссылки на экземпляр класса Ticket по индексу хранилища.</p><h3 id="ticket-findbyid-std-string-id" tabindex="-1">Ticket *FindById(std::string id); <a class="header-anchor" href="#ticket-findbyid-std-string-id" aria-label="Permalink to &quot;Ticket \\*FindById(std::string id);&quot;">​</a></h3><p>Функция для получении ссылки на экземпляр класса Ticket по уникальному номеру.</p><h3 id="std-vector-ticket-filter-ticketstorefilter-filter" tabindex="-1">std::vector&lt;Ticket *&gt; Filter(TicketStoreFilter filter) <a class="header-anchor" href="#std-vector-ticket-filter-ticketstorefilter-filter" aria-label="Permalink to &quot;std::vector&lt;Ticket \\*&gt; Filter(TicketStoreFilter filter)&quot;">​</a></h3><p>Функция для фильтрации билета в хранилище по выбраным параметрам. Доступные параметры:</p><ul><li>.row - фильтрация билета по определенному ряду</li><li>.place - фильтрация билета по определенному месту в ряду</li><li>.eventId фильтрация билета по определенному ивенту</li><li>.customerId фильтрация билета по определенному пользователю</li></ul><h2 id="private-api" tabindex="-1">Private API <a class="header-anchor" href="#private-api" aria-label="Permalink to &quot;Private API&quot;">​</a></h2><ul><li><code>std::vector&lt;Ticket *&gt;</code> ticket - хранилище всех тикетов системы.</li></ul>',29),o=[r];function s(l,c,n,h,k,u){return i(),t("div",null,o)}const v=e(d,[["render",s]]);export{p as __pageData,v as default};
